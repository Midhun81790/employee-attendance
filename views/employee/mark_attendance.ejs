<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mark <%= attendanceType.replace('_', ' ') %> - <%= employee.name %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .attendance-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        }
        .btn-mark {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            border: none;
            border-radius: 25px;
            padding: 15px 40px;
            color: white;
            font-weight: 600;
            font-size: 1.1em;
            transition: all 0.3s ease;
        }
        .btn-mark:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(17, 153, 142, 0.4);
            color: white;
        }
        .btn-mark:disabled {
            background: #6c757d;
            transform: none;
            box-shadow: none;
        }
        .location-card {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            border: 2px solid #e9ecef;
        }
        .location-verified {
            border-color: #28a745;
            background: #d4edda;
        }
        .location-warning {
            border-color: #ffc107;
            background: #fff3cd;
        }
        .location-error {
            border-color: #dc3545;
            background: #f8d7da;
        }
        .loading-spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #11998e;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .distance-info {
            font-family: 'Courier New', monospace;
            font-weight: bold;
        }
        .face-scan-card {
            background: #e3f2fd;
            border: 2px solid #2196f3;
            border-radius: 10px;
            padding: 20px;
        }
        .face-verified {
            background: #e8f5e8;
            border-color: #4caf50;
        }
        .face-error {
            background: #ffebee;
            border-color: #f44336;
        }
        #video {
            width: 100%;
            max-width: 400px;
            height: 300px;
            border-radius: 10px;
            border: 2px solid #ddd;
        }
        .face-overlay {
            position: relative;
            display: inline-block;
        }
        .face-detection-box {
            position: absolute;
            border: 2px solid #00ff00;
            background: rgba(0, 255, 0, 0.1);
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-lg-6">
                <!-- Back Button -->
                <div class="mb-3">
                    <a href="/employee/dashboard" class="btn btn-light">
                        <i class="bi bi-arrow-left"></i> Back to Dashboard
                    </a>
                </div>

                <div class="attendance-card p-4">
                    <!-- Header -->
                    <div class="text-center mb-4">
                        <div class="mb-3">
                            <% if (attendanceType === 'MORNING_ENTRY') { %>
                                <i class="bi bi-sunrise display-3 text-warning"></i>
                                <h3 class="mt-2">Morning Entry</h3>
                                <p class="text-muted">Mark your arrival for the day</p>
                            <% } else if (attendanceType === 'LUNCH_EXIT') { %>
                                <i class="bi bi-box-arrow-right display-3 text-info"></i>
                                <h3 class="mt-2">Lunch Exit</h3>
                                <p class="text-muted">Going for lunch break</p>
                            <% } else if (attendanceType === 'LUNCH_ENTRY') { %>
                                <i class="bi bi-box-arrow-in-left display-3 text-success"></i>
                                <h3 class="mt-2">Lunch Entry</h3>
                                <p class="text-muted">Back from lunch break</p>
                            <% } else if (attendanceType === 'END_EXIT') { %>
                                <i class="bi bi-sunset display-3 text-primary"></i>
                                <h3 class="mt-2">End Exit</h3>
                                <p class="text-muted">End of working day</p>
                            <% } %>
                        </div>
                        
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i>
                            <strong><%= employee.name %></strong> (ID: <%= employee.employeeId %>)<br>
                            <span id="currentTime"></span>
                        </div>
                    </div>

                    <!-- Location Status -->
                    <div id="locationCard" class="location-card mb-4">
                        <div class="text-center">
                            <div class="loading-spinner mb-3"></div>
                            <h5>Detecting your location...</h5>
                            <p class="text-muted mb-2">Please allow location access when prompted</p>
                            <small class="text-muted">If no prompt appears, please check your browser location permissions.</small>
                        </div>
                    </div>

                    <!-- Face Scanning Section (Hidden initially) -->
                    <div id="faceScanCard" class="face-scan-card mb-4" style="display: none;">
                        <div class="text-center">
                            <h5><i class="bi bi-person-check"></i> Face Verification Required</h5>
                            <p class="text-muted mb-3">Please look at the camera for face verification</p>
                            
                            <div class="face-overlay mb-3">
                                <video id="video" autoplay muted></video>
                                <canvas id="overlay" style="position: absolute; top: 0; left: 0; display: none;"></canvas>
                            </div>
                            
                            <div id="faceStatus" class="mb-3">
                                <div class="loading-spinner mb-2"></div>
                                <p class="mb-0">Initializing camera...</p>
                            </div>
                            
                            <button id="startFaceScanning" class="btn btn-primary" style="display: none;">
                                <i class="bi bi-camera"></i> Start Face Scanning
                            </button>
                        </div>
                    </div>

                    <!-- Attendance Button -->
                    <div class="text-center mb-4">
                        <button id="markAttendanceBtn" class="btn btn-mark" disabled>
                            <i class="bi bi-clock"></i> Mark Attendance
                        </button>
                    </div>

                    <!-- Result Area -->
                    <div id="resultArea"></div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>
    
    <!-- Simple Location Detection System -->
    <script>
        const attendanceType = <%- JSON.stringify(attendanceType) %>;
        const companyLocation = <%- JSON.stringify(companyLocation) %>;

        console.log('Attendance Type:', attendanceType);
        console.log('Company Location:', companyLocation);

        let userLocation = null;
        let locationAccuracy = null;
        let faceVerified = false;
        let video, canvas, ctx;
        let knownDescriptors = [];
        let detectionInterval;
        let locationTimeout = null;

        // Update current time
        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleString('en-IN', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: true
            });
            document.getElementById('currentTime').textContent = timeString;
        }

        // Calculate distance between two coordinates
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371000; // Earth's radius in meters
            const φ1 = lat1 * Math.PI / 180;
            const φ2 = lat2 * Math.PI / 180;
            const Δφ = (lat2 - lat1) * Math.PI / 180;
            const Δλ = (lon2 - lon1) * Math.PI / 180;

            const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +
                    Math.cos(φ1) * Math.cos(φ2) *
                    Math.sin(Δλ/2) * Math.sin(Δλ/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

            return R * c; // Distance in meters
        }

        // Simple and efficient location detection
        function getUserLocation() {
            console.log('🚀 Starting simple location detection...');
            
            if (!navigator.geolocation) {
                showLocationError("Geolocation not supported", "Please use a modern browser that supports location services.");
                return;
            }

            // Show loading state
            updateLocationCard("Getting your location...", "Please allow location access when prompted", "loading");

            // Set timeout for location detection
            locationTimeout = setTimeout(() => {
                showLocationError(
                    "Location detection timed out",
                    "Please check your browser's location permissions and try again."
                );
            }, 15000);

            // Mobile-optimized GPS options
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            
            const gpsOptions = {
                enableHighAccuracy: true,
                timeout: isMobile ? 20000 : 15000,
                maximumAge: 60000 // Accept 1-minute cached location
            };

            console.log(`📱 Device: ${isMobile ? 'Mobile' : 'Desktop'}`);

            // Try high accuracy GPS first
            navigator.geolocation.getCurrentPosition(
                handleLocationSuccess,
                (error) => {
                    console.warn('High accuracy GPS failed, trying fallback...');
                    
                    // Fallback with lower accuracy
                    const fallbackOptions = {
                        enableHighAccuracy: false,
                        timeout: isMobile ? 25000 : 20000,
                        maximumAge: 300000 // Accept 5-minute cached location
                    };

                    navigator.geolocation.getCurrentPosition(
                        handleLocationSuccess,
                        handleLocationError,
                        fallbackOptions
                    );
                },
                gpsOptions
            );
        }

        // Handle successful location retrieval
        function handleLocationSuccess(position) {
            if (locationTimeout) clearTimeout(locationTimeout);
            
            console.log('✅ Location detected successfully:', position);
            
            userLocation = {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
            };
            locationAccuracy = position.coords.accuracy;

            // Calculate distance from office
            const distance = calculateDistance(
                userLocation.latitude,
                userLocation.longitude,
                companyLocation.latitude,
                companyLocation.longitude
            );

            const isWithinGeofence = distance <= companyLocation.radius;
            console.log(`📍 Distance from office: ${distance}m`);
            console.log(`✅ Within geofence: ${isWithinGeofence}`);

            // Get address using simple reverse geocoding
            getSimpleAddress(userLocation.latitude, userLocation.longitude)
                .then(address => {
                    showLocationStatus(distance, isWithinGeofence, address);
                })
                .catch(() => {
                    showLocationStatus(distance, isWithinGeofence, 
                        `${userLocation.latitude.toFixed(4)}, ${userLocation.longitude.toFixed(4)}`);
                });
        }

        // Handle location error
        function handleLocationError(error) {
            if (locationTimeout) clearTimeout(locationTimeout);
            
            console.error('❌ Location detection failed:', error);
            
            let message = "Unable to get your location";
            let suggestion = "";
            
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    message = "Location access was denied";
                    suggestion = "Trying WiFi-based location detection...";
                    break;
                case error.POSITION_UNAVAILABLE:
                    message = "Location information is unavailable";
                    suggestion = "Trying WiFi-based location detection...";
                    break;
                case error.TIMEOUT:
                    message = "Location request timed out";
                    suggestion = "Trying WiFi-based location detection...";
                    break;
                default:
                    suggestion = "Trying WiFi-based location detection...";
            }
            
            // Try WiFi-based location as fallback
            console.log('🔄 Attempting WiFi-based location detection...');
            updateLocationCard("Trying WiFi location...", "Checking if you're connected to office WiFi network", "loading");
            
            setTimeout(() => {
                tryWiFiLocation();
            }, 2000);
        }

        // Try WiFi-based location detection
        async function tryWiFiLocation() {
            try {
                console.log('📶 Attempting WiFi-based location detection...');
                
                // Method 1: Check IP-based location for office network
                const ipLocation = await getIPBasedLocation();
                
                if (ipLocation && ipLocation.isOfficeNetwork) {
                    console.log('✅ Office WiFi detected via IP location');
                    
                    // Use office location coordinates
                    const wifiPosition = {
                        coords: {
                            latitude: companyLocation.latitude,
                            longitude: companyLocation.longitude,
                            accuracy: 100 // WiFi accuracy is moderate
                        }
                    };
                    
                    userLocation = {
                        latitude: wifiPosition.coords.latitude,
                        longitude: wifiPosition.coords.longitude
                    };
                    locationAccuracy = wifiPosition.coords.accuracy;
                    
                    const distance = 0; // Assume at office if on office WiFi
                    const address = `${ipLocation.city || 'Office'}, ${ipLocation.region || 'India'} (WiFi)`;
                    
                    showLocationStatus(distance, true, address);
                    return;
                }
                
                // Method 2: Check if connected to known office WiFi networks
                if (await isConnectedToOfficeWiFi()) {
                    console.log('✅ Office WiFi network detected');
                    
                    const wifiPosition = {
                        coords: {
                            latitude: companyLocation.latitude,
                            longitude: companyLocation.longitude,
                            accuracy: 50
                        }
                    };
                    
                    userLocation = {
                        latitude: wifiPosition.coords.latitude,
                        longitude: wifiPosition.coords.longitude
                    };
                    locationAccuracy = wifiPosition.coords.accuracy;
                    
                    showLocationStatus(0, true, "Office Location (WiFi Network)");
                    return;
                }
                
                // Fallback: No office network detected
                console.log('❌ No office WiFi network detected');
                showLocationError(
                    "Location detection failed", 
                    "GPS unavailable and not connected to office WiFi. Please enable location services or connect to office WiFi network."
                );
                
            } catch (error) {
                console.error('WiFi location detection failed:', error);
                showLocationError(
                    "All location methods failed",
                    "Please enable GPS location services or connect to the office WiFi network."
                );
            }
        }

        // Get IP-based location to check if on office network
        async function getIPBasedLocation() {
            try {
                // Try multiple IP location services with better data
                const services = [
                    {
                        url: 'http://ip-api.com/json/?fields=status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query',
                        parser: (data) => ({
                            ip: data.query,
                            city: data.city,
                            region: data.regionName,
                            country: data.country,
                            lat: data.lat,
                            lon: data.lon,
                            isp: data.isp,
                            org: data.org
                        })
                    },
                    {
                        url: 'https://ipapi.co/json/',
                        parser: (data) => ({
                            ip: data.ip,
                            city: data.city,
                            region: data.region,
                            country: data.country_name,
                            lat: data.latitude,
                            lon: data.longitude,
                            isp: data.org
                        })
                    },
                    {
                        url: 'https://api.ipify.org?format=json',
                        parser: (data) => ({
                            ip: data.ip,
                            city: null,
                            region: null,
                            country: null,
                            lat: null,
                            lon: null,
                            isp: null
                        })
                    }
                ];
                
                for (const service of services) {
                    try {
                        console.log(`🌐 Trying IP service: ${service.url}`);
                        
                        const response = await fetch(service.url, {
                            method: 'GET',
                            headers: {
                                'Accept': 'application/json',
                            }
                        });
                        
                        if (!response.ok) throw new Error(`HTTP ${response.status}`);
                        
                        const data = await response.json();
                        const parsedData = service.parser(data);
                        
                        console.log('📍 IP Location data:', parsedData);
                        
                        // Check if IP suggests office location
                        const isOfficeNetwork = checkIfOfficeIP(parsedData);
                        
                        return {
                            ...parsedData,
                            isOfficeNetwork: isOfficeNetwork
                        };
                        
                    } catch (err) {
                        console.warn(`❌ IP service ${service.url} failed:`, err);
                        continue;
                    }
                }
                
                console.warn('⚠️ All IP location services failed');
                return null;
                
            } catch (error) {
                console.error('❌ IP location detection error:', error);
                return null;
            }
        }

        // Check if IP address suggests office network
        function checkIfOfficeIP(ipData) {
            // Office network configuration - UPDATED WITH ACTUAL OFFICE DETAILS
            const officeLocationCriteria = {
                // Your office city names (case-insensitive)
                cities: ['Piduguralla'], // Manually put actual city
                
                // Your office IP ranges (if you know them)
                ipRanges: ['192.168.', '10.0.', '172.16.'], // Your Wi-Fi LAN ranges
                
                // ISP names that your office might use
                isps: ['Reliance Jio Infocomm Limited'], // Your office ISP
                
                // Maximum distance from office coordinates (in meters)
                maxDistanceFromOffice: 10000 // 10 km
            };
            
            console.log('🔍 Checking IP data:', ipData);
            
            // Check city match (case-insensitive)
            if (ipData.city && officeLocationCriteria.cities.some(city => 
                ipData.city.toLowerCase().includes(city.toLowerCase()))) {
                console.log(`✅ IP city "${ipData.city}" matches office location`);
                return true;
            }
            
            // Check IP range (basic check for local networks)
            if (ipData.ip && officeLocationCriteria.ipRanges.some(range => 
                ipData.ip.startsWith(range))) {
                console.log(`✅ IP address "${ipData.ip}" is in office network range`);
                return true;
            }
            
            // Check ISP match (if provided)
            if (ipData.isp && officeLocationCriteria.isps.some(isp => 
                ipData.isp.toLowerCase().includes(isp.toLowerCase()))) {
                console.log(`✅ ISP "${ipData.isp}" matches office ISP`);
                // For ISP match, also check distance
                if (ipData.lat && ipData.lon) {
                    const distance = calculateDistance(
                        ipData.lat, ipData.lon,
                        companyLocation.latitude, companyLocation.longitude
                    );
                    
                    if (distance <= officeLocationCriteria.maxDistanceFromOffice) {
                        console.log(`✅ Distance ${Math.round(distance)}m within acceptable range`);
                        return true;
                    }
                }
            }
            
            // Check distance from office (if IP provides coordinates)
            if (ipData.lat && ipData.lon) {
                const distance = calculateDistance(
                    ipData.lat, ipData.lon,
                    companyLocation.latitude, companyLocation.longitude
                );
                
                console.log(`📍 Distance from office: ${Math.round(distance)}m`);
                
                if (distance <= officeLocationCriteria.maxDistanceFromOffice) {
                    console.log(`✅ IP location within ${Math.round(distance)}m of office`);
                    return true;
                }
            }
            
            console.log('❌ IP data does not match office criteria');
            return false;
        }

        // Check if connected to known office WiFi networks
        async function isConnectedToOfficeWiFi() {
            try {
                // This is a simplified check using network timing
                // In a real scenario, you might check specific network characteristics
                
                // Method 1: Check connection speed/latency to office server
                const startTime = performance.now();
                await fetch(window.location.origin + '/ping', { 
                    method: 'HEAD',
                    cache: 'no-cache'
                });
                const latency = performance.now() - startTime;
                
                // If very low latency, might be on local network
                if (latency < 50) { // Less than 50ms suggests local network
                    console.log('🌐 Low latency detected - possibly office network');
                    return true;
                }
                
                // Method 2: Check for office-specific network indicators
                // You could add more sophisticated checks here
                
                return false;
                
            } catch (error) {
                console.warn('WiFi network check failed:', error);
                return false;
            }
        }

        // Simple reverse geocoding using free service
        async function getSimpleAddress(lat, lon) {
            try {
                // Try multiple free services for reliability
                const services = [
                    `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=en`,
                    `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&zoom=18&addressdetails=1`
                ];

                for (const serviceUrl of services) {
                    try {
                        const response = await fetch(serviceUrl);
                        const data = await response.json();
                        
                        // Handle different response formats
                        let address = data.display_name || data.locality || 
                                     `${data.city || data.locality || 'Unknown'}, ${data.principalSubdivision || data.countryName || 'India'}`;
                        
                        if (address && address !== 'undefined, undefined') {
                            return address;
                        }
                    } catch (err) {
                        console.warn('Geocoding service failed:', err);
                        continue;
                    }
                }
                
                // Fallback to coordinates
                return `${lat.toFixed(4)}, ${lon.toFixed(4)}`;
                
            } catch (error) {
                console.warn('All geocoding failed:', error);
                return `${lat.toFixed(4)}, ${lon.toFixed(4)}`;
            }
        }

        // Update location card with custom message
        function updateLocationCard(title, message, type = "loading") {
            const locationCard = document.getElementById('locationCard');
            
            if (type === "loading") {
                locationCard.className = 'location-card mb-4';
                locationCard.innerHTML = `
                    <div class="text-center">
                        <div class="loading-spinner mb-3"></div>
                        <h5>${title}</h5>
                        <p class="text-muted mb-2">${message}</p>
                    </div>
                `;
            } else if (type === "error") {
                locationCard.className = 'location-card mb-4 location-error';
                locationCard.innerHTML = `
                    <div class="text-center">
                        <i class="bi bi-geo-alt-slash text-danger" style="font-size: 3rem;"></i>
                        <h5 class="mt-2 text-danger">${title}</h5>
                        <p class="mb-2"><strong>${message}</strong></p>
                        <div class="mt-3">
                            <button class="btn btn-outline-primary" onclick="getUserLocation()">
                                <i class="bi bi-arrow-clockwise"></i> Try Again
                            </button>
                        </div>
                    </div>
                `;
            }
        }

        // Show location error
        function showLocationError(message, suggestion = "") {
            updateLocationCard(message, suggestion, "error");
        }

        // Show location status
        function showLocationStatus(distance, isWithinGeofence, address) {
            const locationCard = document.getElementById('locationCard');
            const markBtn = document.getElementById('markAttendanceBtn');
            
            let statusClass = isWithinGeofence ? 'location-verified' : 'location-error';
            let statusIcon = isWithinGeofence ? 'bi-geo-alt-fill text-success' : 'bi-geo-alt text-danger';
            let statusText = isWithinGeofence ? 'Within office area' : 'Outside office area';
            
            locationCard.className = `location-card mb-4 ${statusClass}`;
            locationCard.innerHTML = `
                <div class="row align-items-center">
                    <div class="col-auto">
                        <i class="bi ${statusIcon}" style="font-size: 2rem;"></i>
                    </div>
                    <div class="col">
                        <h6 class="mb-1">${statusText}</h6>
                        <p class="mb-1"><strong>Your location:</strong> ${address}</p>
                        <p class="mb-1 distance-info">Distance from office: ${Math.round(distance)}m</p>
                        <small class="text-muted">Accuracy: ±${Math.round(locationAccuracy)}m</small>
                    </div>
                </div>
                ${!isWithinGeofence ? `
                <div class="alert alert-danger mt-3 mb-0">
                    <i class="bi bi-x-circle"></i>
                    <strong>Access Denied:</strong> You must be at the office location (within ${companyLocation.radius}m) to mark attendance.
                </div>
                ` : ''}
            `;
            
            if (isWithinGeofence) {
                showFaceScanning();
            } else {
                document.getElementById('faceScanCard').style.display = 'none';
                markBtn.disabled = true;
                markBtn.innerHTML = '<i class="bi bi-x-circle"></i> Not at Office Location';
                markBtn.className = 'btn btn-danger disabled';
            }
        }

        // Show face scanning after location is verified
        function showFaceScanning() {
            document.getElementById('faceScanCard').style.display = 'block';
            initializeFaceRecognition();
        }

        // Initialize face recognition
        async function initializeFaceRecognition() {
            try {
                console.log('Loading face-api models...');
                
                // Try loading from local models first, fallback to CDN
                const modelPaths = [
                    '/models',
                    'https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'
                ];
                
                for (const modelPath of modelPaths) {
                    try {
                        await Promise.all([
                            faceapi.nets.tinyFaceDetector.loadFromUri(modelPath),
                            faceapi.nets.faceRecognitionNet.loadFromUri(modelPath),
                            faceapi.nets.faceLandmark68Net.loadFromUri(modelPath)
                        ]);
                        
                        console.log(`✅ Models loaded from: ${modelPath}`);
                        break;
                        
                    } catch (err) {
                        console.warn(`Failed to load models from ${modelPath}:`, err);
                        continue;
                    }
                }

                await loadKnownDescriptors();
                await startCamera();
                
            } catch (error) {
                console.error('Error initializing face recognition:', error);
                showFaceError('Failed to initialize face recognition: ' + error.message);
            }
        }

        // Load known employee descriptors
        async function loadKnownDescriptors() {
            try {
                const response = await fetch('/get-descriptors');
                const employees = await response.json();
                
                knownDescriptors = employees.filter(emp => emp.faceId && emp.faceId.length > 0)
                    .map(emp => ({
                        name: emp.name,
                        descriptor: new Float32Array(emp.faceId)
                    }));
                
                console.log(`Loaded ${knownDescriptors.length} known face descriptors`);
            } catch (error) {
                console.error('Error loading descriptors:', error);
                throw error;
            }
        }

        // Start camera
        async function startCamera() {
            try {
                video = document.getElementById('video');
                canvas = document.getElementById('overlay');
                
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        width: { ideal: 640 }, 
                        height: { ideal: 480 },
                        facingMode: 'user'
                    } 
                });
                
                video.srcObject = stream;
                
                video.addEventListener('loadedmetadata', () => {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    canvas.style.display = 'block';
                    ctx = canvas.getContext('2d');
                    
                    updateFaceStatus('Camera ready. Please look at the camera...', 'info');
                    startFaceDetection();
                });
                
            } catch (error) {
                console.error('Camera error:', error);
                showFaceError('Camera access denied. Please allow camera access and try again.');
            }
        }

        // Start face detection
        function startFaceDetection() {
            detectionInterval = setInterval(async () => {
                if (!video || video.paused || video.ended) return;
                
                try {
                    const detections = await faceapi
                        .detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
                        .withFaceLandmarks()
                        .withFaceDescriptor();
                    
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    
                    if (detections) {
                        const box = detections.detection.box;
                        ctx.strokeStyle = '#00ff00';
                        ctx.lineWidth = 2;
                        ctx.strokeRect(box.x, box.y, box.width, box.height);
                        
                        const match = findBestMatch(detections.descriptor);
                        
                        if (match.distance < 0.6) {
                            console.log(`Face recognized: ${match.name}`);
                            faceVerified = true;
                            
                            clearInterval(detectionInterval);
                            video.srcObject.getTracks().forEach(track => track.stop());
                            
                            showFaceSuccess(match.name);
                            
                            const markBtn = document.getElementById('markAttendanceBtn');
                            markBtn.disabled = false;
                            markBtn.innerHTML = '<i class="bi bi-check-circle"></i> Mark Attendance';
                            
                        } else {
                            updateFaceStatus('Face detected but not recognized. Please ensure good lighting.', 'warning');
                        }
                    } else {
                        updateFaceStatus('Looking for face... Please position yourself in front of the camera.', 'info');
                    }
                    
                } catch (error) {
                    console.error('Detection error:', error);
                }
            }, 1000);
        }

        // Find best matching face
        function findBestMatch(descriptor) {
            let bestMatch = { name: 'unknown', distance: 1.0 };
            
            for (const known of knownDescriptors) {
                const distance = faceapi.euclideanDistance(descriptor, known.descriptor);
                if (distance < bestMatch.distance) {
                    bestMatch = { name: known.name, distance };
                }
            }
            
            return bestMatch;
        }

        // Update face scanning status
        function updateFaceStatus(message, type = 'info') {
            const faceStatus = document.getElementById('faceStatus');
            let icon = 'bi-camera';
            let className = 'text-info';
            
            if (type === 'warning') {
                icon = 'bi-exclamation-triangle';
                className = 'text-warning';
            } else if (type === 'success') {
                icon = 'bi-check-circle';
                className = 'text-success';
            }
            
            faceStatus.innerHTML = `
                <i class="bi ${icon} ${className}" style="font-size: 1.5rem;"></i>
                <p class="mb-0 ${className}">${message}</p>
            `;
        }

        // Show face verification success
        function showFaceSuccess(employeeName) {
            const faceCard = document.getElementById('faceScanCard');
            faceCard.className = 'face-scan-card face-verified mb-4';
            faceCard.innerHTML = `
                <div class="text-center">
                    <i class="bi bi-person-check-fill text-success" style="font-size: 3rem;"></i>
                    <h5 class="mt-2 text-success">Face Verified!</h5>
                    <p class="mb-0">Welcome, <strong>${employeeName}</strong></p>
                    <small class="text-muted">Identity confirmed. You can now mark attendance.</small>
                </div>
            `;
        }

        // Show face scanning error
        function showFaceError(message) {
            const faceCard = document.getElementById('faceScanCard');
            faceCard.className = 'face-scan-card face-error mb-4';
            faceCard.innerHTML = `
                <div class="text-center">
                    <i class="bi bi-person-x-fill text-danger" style="font-size: 3rem;"></i>
                    <h5 class="mt-2 text-danger">Face Verification Failed</h5>
                    <p class="mb-3">${message}</p>
                    <button class="btn btn-outline-primary" onclick="initializeFaceRecognition()">
                        <i class="bi bi-arrow-clockwise"></i> Try Again
                    </button>
                </div>
            `;
        }

        // Mark attendance
        async function markAttendance() {
            if (!userLocation) {
                alert('Please allow location access first');
                return;
            }

            if (!faceVerified) {
                alert('Please complete face verification first');
                return;
            }

            const markBtn = document.getElementById('markAttendanceBtn');
            markBtn.disabled = true;
            markBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Marking...';

            try {
                const address = await getSimpleAddress(userLocation.latitude, userLocation.longitude);
                
                const requestData = {
                    attendanceType,
                    latitude: userLocation.latitude,
                    longitude: userLocation.longitude,
                    address,
                    accuracy: locationAccuracy
                };
                
                const response = await fetch('/employee/mark-attendance', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                });

                const result = await response.json();

                if (response.ok) {
                    showSuccess(result);
                } else {
                    showError(result.message || 'Failed to mark attendance');
                }
            } catch (error) {
                console.error('Error marking attendance:', error);
                showError('Failed to mark attendance. Please try again.');
            }

            markBtn.disabled = false;
            markBtn.innerHTML = '<i class="bi bi-clock"></i> Mark Attendance';
        }

        // Show success message
        function showSuccess(result) {
            const resultArea = document.getElementById('resultArea');
            resultArea.innerHTML = `
                <div class="alert alert-success text-center">
                    <i class="bi bi-check-circle-fill" style="font-size: 3rem;"></i>
                    <h4 class="mt-2">Attendance Marked!</h4>
                    <p class="mb-1">${result.message}</p>
                    <hr>
                    <div class="row text-start">
                        <div class="col-6">
                            <strong>Time:</strong><br>
                            <small>${new Date(result.timestamp).toLocaleString('en-IN')}</small>
                        </div>
                        <div class="col-6">
                            <strong>Distance:</strong><br>
                            <small>${result.distance}m from office</small>
                        </div>
                    </div>
                    <div class="mt-3">
                        <a href="/employee/dashboard" class="btn btn-primary">
                            <i class="bi bi-house"></i> Back to Dashboard
                        </a>
                    </div>
                </div>
            `;
            document.getElementById('markAttendanceBtn').style.display = 'none';
        }

        // Show error message
        function showError(message) {
            const resultArea = document.getElementById('resultArea');
            resultArea.innerHTML = `
                <div class="alert alert-danger text-center">
                    <i class="bi bi-exclamation-triangle-fill" style="font-size: 2rem;"></i>
                    <h5 class="mt-2">Error</h5>
                    <p class="mb-0">${message}</p>
                </div>
            `;
        }

        // Event listeners
        document.getElementById('markAttendanceBtn').addEventListener('click', markAttendance);

        // Initialize
        updateTime();
        setInterval(updateTime, 1000);
        getUserLocation();
    </script>
</body>
</html>
