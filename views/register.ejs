<!-- views/register.ejs -->
<!DOCTYPE html>
<html>
<head>
  <title>Register New Employee</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background: #f8f9fa;
    }
    .register-header {
      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
      color: white;
      padding: 2rem 0;
    }
    .video-container {
      position: relative;
      display: inline-block;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 0 20px rgba(0,0,0,0.2);
    }
    .status-indicator {
      position: absolute;
      top: 10px;
      right: 10px;
      padding: 5px 10px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: bold;
    }
    .status-loading {
      background: #ffc107;
      color: #000;
    }
    .status-ready {
      background: #28a745;
      color: #fff;
    }
    .capture-button {
      background: linear-gradient(45deg, #28a745, #20c997);
      border: none;
      padding: 12px 25px;
      font-weight: bold;
      border-radius: 25px;
      box-shadow: 0 4px 15px rgba(40,167,69,0.3);
      transition: all 0.3s;
    }
    .capture-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(40,167,69,0.4);
    }
    .captured-indicator {
      background: #28a745;
      color: white;
      padding: 10px;
      border-radius: 5px;
      margin-top: 10px;
      display: none;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container-fluid">
      <a class="navbar-brand" href="/dashboard">
        <i class="fas fa-arrow-left"></i> Back to Dashboard
      </a>
      <span class="navbar-text">
        Register New Employee
      </span>
      <a href="/logout" class="btn btn-light">
        <i class="fas fa-sign-out-alt"></i> Logout
      </a>
    </div>
  </nav>

  <div class="register-header">
    <div class="container text-center">
      <h2><i class="fas fa-user-plus"></i> Employee Registration</h2>
      <p class="lead">Add a new employee to the face recognition system</p>
    </div>
  </div>

  <div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <div class="card shadow-lg">
          <div class="card-body p-4">
            <form id="registerForm" method="POST" action="/register" enctype="multipart/form-data">
              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="name" class="form-label">
                      <i class="fas fa-user"></i> Employee Name *
                    </label>
                    <input type="text" class="form-control form-control-lg" name="name" id="name" 
                           placeholder="Enter full name" required>
                    <div class="form-text">Enter the employee's full name as it should appear in records</div>
                  </div>

                  <div class="mb-3">
                    <label class="form-label">
                      <i class="fas fa-camera"></i> Face Capture *
                    </label>
                    <div class="text-center">
                      <div class="video-container">
                        <video id="video" width="320" height="240" autoplay></video>
                        <canvas id="canvas" width="320" height="240" style="position: absolute; top: 0; left: 0; pointer-events: none;"></canvas>
                        <div id="statusIndicator" class="status-indicator status-loading">
                          Loading...
                        </div>
                      </div>
                      <div id="capturedIndicator" class="captured-indicator">
                        <i class="fas fa-check-circle"></i> Face captured successfully!
                      </div>
                      <div class="mt-3">
                        <button type="button" class="btn capture-button" id="captureBtn" onclick="capture()" disabled>
                          <i class="fas fa-camera"></i> Capture Face
                        </button>
                      </div>
                      <input type="hidden" name="faceId" id="faceId">
                    </div>
                  </div>
                </div>

                <div class="col-md-6">
                  <div class="card bg-light h-100">
                    <div class="card-body">
                      <h5 class="card-title">
                        <i class="fas fa-info-circle text-primary"></i> Instructions
                      </h5>
                      <ul class="list-unstyled">
                        <li class="mb-2">
                          <i class="fas fa-check text-success"></i> 
                          Look directly at the camera
                        </li>
                        <li class="mb-2">
                          <i class="fas fa-check text-success"></i> 
                          Ensure good lighting
                        </li>
                        <li class="mb-2">
                          <i class="fas fa-check text-success"></i> 
                          Remove glasses if possible
                        </li>
                        <li class="mb-2">
                          <i class="fas fa-check text-success"></i> 
                          Keep face centered in frame
                        </li>
                        <li class="mb-2">
                          <i class="fas fa-check text-success"></i> 
                          Stay still during capture
                        </li>
                        <li class="mb-2">
                          <i class="fas fa-info text-primary"></i> 
                          Green box shows detected face
                        </li>
                      </ul>

                      <div class="mt-4">
                        <h6>Registration Status:</h6>
                        <div class="progress mb-2">
                          <div class="progress-bar" role="progressbar" style="width: 0%" id="progressBar">
                            0% Complete
                          </div>
                        </div>
                        <small class="text-muted" id="statusText">Waiting for face capture...</small>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="row mt-4">
                <div class="col-12 text-center">
                  <button type="submit" class="btn btn-success btn-lg" id="submitBtn" disabled>
                    <i class="fas fa-user-plus"></i> Register Employee
                  </button>
                  <div class="mt-2">
                    <small class="text-muted">Please capture face before registering</small>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://kit.fontawesome.com/your-fontawesome-kit.js" crossorigin="anonymous"></script>
  <script>
    const video = document.getElementById("video");
    const captureBtn = document.getElementById("captureBtn");
    const submitBtn = document.getElementById("submitBtn");
    const statusIndicator = document.getElementById("statusIndicator");
    const capturedIndicator = document.getElementById("capturedIndicator");
    const progressBar = document.getElementById("progressBar");
    const statusText = document.getElementById("statusText");
    
    let modelsLoaded = false;
    let faceCaptured = false;
    let faceApiLoaded = false;

    // Load face-api.js from CDN with fallback
    function loadFaceApiLibrary() {
      return new Promise((resolve, reject) => {
        const cdnSources = [
          'https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js',
          'https://unpkg.com/face-api.js@0.22.2/dist/face-api.min.js'
        ];

        let currentIndex = 0;

        function tryLoadScript() {
          if (currentIndex >= cdnSources.length) {
            reject(new Error('Failed to load face-api.js from all CDN sources'));
            return;
          }

          const script = document.createElement('script');
          script.src = cdnSources[currentIndex];

          script.onload = function() {
            if (typeof faceapi !== 'undefined') {
              console.log('face-api.js loaded successfully');
              faceApiLoaded = true;
              resolve();
            } else {
              currentIndex++;
              tryLoadScript();
            }
          };

          script.onerror = function() {
            console.error(`Failed to load from ${cdnSources[currentIndex]}`);
            currentIndex++;
            tryLoadScript();
          };

          document.head.appendChild(script);
        }

        tryLoadScript();
      });
    }

    // Update progress
    function updateProgress(percent, text) {
      progressBar.style.width = percent + '%';
      progressBar.textContent = percent + '% Complete';
      statusText.textContent = text;
    }

    // Update status indicator
    function updateStatus(text, type) {
      statusIndicator.textContent = text;
      statusIndicator.className = `status-indicator status-${type}`;
    }

    // Draw face detection overlay
    function drawFaceDetection() {
      if (!modelsLoaded || !video.videoWidth) return;
      
      const canvas = document.getElementById('canvas');
      const ctx = canvas.getContext('2d');
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Set canvas size to match video
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      
      faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions({
        inputSize: 224,
        scoreThreshold: 0.3
      })).then(detections => {
        if (detections && detections.length > 0) {
          ctx.strokeStyle = '#00ff00';
          ctx.lineWidth = 2;
          detections.forEach(detection => {
            const { x, y, width, height } = detection.box;
            ctx.strokeRect(x, y, width, height);
            
            // Show confidence score
            ctx.fillStyle = '#00ff00';
            ctx.font = '12px Arial';
            ctx.fillText(`${(detection.score * 100).toFixed(1)}%`, x, y - 5);
          });
        }
      }).catch(err => {
        console.log("Detection preview error:", err);
      });
    }

    // Start face detection preview
    function startFacePreview() {
      if (modelsLoaded) {
        drawFaceDetection();
        setTimeout(startFacePreview, 500); // Update every 500ms
      }
    }

    // Start video stream
    async function startVideo() {
      try {
        updateProgress(25, "Accessing camera...");
        
        const stream = await navigator.mediaDevices.getUserMedia({ 
          video: { 
            width: 320, 
            height: 240,
            facingMode: 'user'
          } 
        });
        video.srcObject = stream;
        
        updateProgress(50, "Camera ready, loading AI models...");
        updateStatus("Camera Ready", "ready");
        
        await loadModels();
      } catch (error) {
        console.error("Error accessing camera:", error);
        updateStatus("Camera Error", "loading");
        alert("Unable to access camera. Please check permissions and try again.");
      }
    }

    // Load face-api models
    async function loadModels() {
      try {
        if (!faceApiLoaded || typeof faceapi === 'undefined') {
          throw new Error('face-api.js library not loaded');
        }

        updateStatus("Loading Models...", "loading");
        
        console.log("Starting to load face-api models...");
        
        // Load models one by one to see which one fails
        try {
          console.log("Loading tinyFaceDetector...");
          await faceapi.nets.tinyFaceDetector.loadFromUri('/models/tiny_face_detector');
          console.log("✅ tinyFaceDetector loaded");
        } catch (err) {
          console.error("❌ Failed to load tinyFaceDetector:", err);
          throw err;
        }
        
        // Try to load SSD MobileNet for better detection
        try {
          console.log("Loading ssdMobilenetv1...");
          await faceapi.nets.ssdMobilenetv1.loadFromUri('/models/ssd_mobilenetv1');
          console.log("✅ ssdMobilenetv1 loaded");
        } catch (err) {
          console.warn("⚠️ Failed to load ssdMobilenetv1 (optional):", err);
        }
        
        try {
          console.log("Loading faceRecognitionNet...");
          await faceapi.nets.faceRecognitionNet.loadFromUri('/models/face_recognition');
          console.log("✅ faceRecognitionNet loaded");
        } catch (err) {
          console.error("❌ Failed to load faceRecognitionNet:", err);
          throw err;
        }
        
        try {
          console.log("Loading faceLandmark68Net...");
          await faceapi.nets.faceLandmark68Net.loadFromUri('/models/face_landmark_68');
          console.log("✅ faceLandmark68Net loaded");
        } catch (err) {
          console.error("❌ Failed to load faceLandmark68Net:", err);
          throw err;
        }

        modelsLoaded = true;
        updateProgress(100, "Ready to capture face");
        updateStatus("Ready to Capture", "ready");
        captureBtn.disabled = false;
        
        // Start face detection preview
        startFacePreview();
        console.log("🎉 All models loaded successfully!");
      } catch (error) {
        console.error("❌ Error loading models:", error);
        updateStatus("Model Load Failed", "loading");
        updateProgress(50, "Failed to load AI models");
        
        // Show detailed error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger mt-3';
        errorDiv.innerHTML = `
          <strong>Model Loading Error:</strong><br>
          ${error.message}<br>
          <small>Check browser console for details.</small>
        `;
        document.querySelector('.card-body').appendChild(errorDiv);
      }
    }

    // Capture face
    async function capture() {
      if (!modelsLoaded) {
        alert("Please wait for models to load");
        return;
      }

      captureBtn.disabled = true;
      updateStatus("Detecting Face...", "loading");

      try {
        // Use more relaxed detection options
        const detectionOptions = new faceapi.TinyFaceDetectorOptions({
          inputSize: 224,
          scoreThreshold: 0.3
        });

        console.log("Starting face detection...");
        
        // Try different detection methods
        let detections = await faceapi
          .detectSingleFace(video, detectionOptions)
          .withFaceLandmarks()
          .withFaceDescriptor();

        if (!detections) {
          console.log("No face detected with TinyFaceDetector, trying with SSD MobileNet...");
          
          // Try with SSD MobileNet if available
          try {
            detections = await faceapi
              .detectSingleFace(video, new faceapi.SsdMobilenetv1Options())
              .withFaceLandmarks()
              .withFaceDescriptor();
          } catch (ssdError) {
            console.log("SSD MobileNet not available:", ssdError);
          }
        }

        if (!detections) {
          updateStatus("No Face Detected", "loading");
          
          // Provide more helpful guidance
          const helpText = `
            Face not detected! Please ensure:
            • Your face is well-lit
            • Look directly at the camera
            • Move closer to the camera
            • Remove any face coverings
            • Try different angles
          `;
          
          alert(helpText);
          captureBtn.disabled = false;
          return;
        }

        console.log("Face detected successfully!");
        console.log("Detection confidence:", detections.detection.score);
        console.log("Descriptor length:", detections.descriptor.length);

        const descriptor = Array.from(detections.descriptor);
        document.getElementById("faceId").value = JSON.stringify(descriptor);
        
        faceCaptured = true;
        updateStatus("Face Captured", "ready");
        capturedIndicator.style.display = "block";
        submitBtn.disabled = false;
        
        // Show success message with confidence score
        capturedIndicator.innerHTML = `
          <i class="fas fa-check-circle"></i> 
          Face captured successfully! (Confidence: ${(detections.detection.score * 100).toFixed(1)}%)
        `;
        
        setTimeout(() => {
          capturedIndicator.style.display = "none";
        }, 5000);

      } catch (error) {
        console.error("Error during face capture:", error);
        updateStatus("Capture Error", "loading");
        alert("Error during face capture. Please try again.");
      }
      
      captureBtn.disabled = false;
    }

    // Form validation
    document.getElementById("registerForm").addEventListener("submit", function(e) {
      const name = document.getElementById("name").value.trim();
      
      if (!name) {
        e.preventDefault();
        alert("Please enter employee name");
        return;
      }
      
      if (!faceCaptured) {
        e.preventDefault();
        alert("Please capture face before registering");
        return;
      }
    });

    // Initialize
    async function initialize() {
      try {
        updateProgress(10, "Loading face-api.js library...");
        await loadFaceApiLibrary();
        updateProgress(25, "Library loaded, starting camera...");
        await startVideo();
      } catch (error) {
        console.error('Error during initialization:', error);
        updateStatus("Initialization Failed", "loading");
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger mt-3';
        errorDiv.innerHTML = `
          <strong>Initialization Error:</strong><br>
          ${error.message}
        `;
        document.querySelector('.card-body').appendChild(errorDiv);
      }
    }
    
    initialize();
  </script>
</body>
</html>
