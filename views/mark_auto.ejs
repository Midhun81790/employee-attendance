<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Auto Mark Attendance - Employee Attendance System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
        }
        .video-container {
            position: relative;
            max-width: 640px;
            margin: 0 auto;
        }
        #video {
            width: 100%;
            height: auto;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        }
        #canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            border-radius: 10px;
        }
        .auto-scan-indicator {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(17, 153, 142, 0.9);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            animation: pulse 2s infinite;
        }
        .auto-scan-indicator.stopped {
            background: rgba(220, 53, 69, 0.9);
            animation: none;
        }
        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.8; transform: scale(1.05); }
            100% { opacity: 1; transform: scale(1); }
        }
        .recognition-overlay {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 10px;
            border-radius: 10px;
            font-size: 14px;
            max-width: 200px;
        }
        .btn-scan {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            border: none;
            border-radius: 25px;
            padding: 12px 30px;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-scan:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(17, 153, 142, 0.4);
            color: white;
        }
        .btn-stop {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
            border: none;
            border-radius: 25px;
            padding: 12px 30px;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-stop:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
            color: white;
        }
        .recent-attendance {
            max-height: 400px;
            overflow-y: auto;
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        .attendance-item {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
            margin-bottom: 10px;
            padding: 15px;
            animation: slideIn 0.5s ease;
        }
        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-20px); }
            to { opacity: 1; transform: translateX(0); }
        }
        .status-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .confidence-bar {
            height: 8px;
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin-top: 5px;
        }
        .confidence-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b 0%, #ffd93d 50%, #6bcf7f 100%);
            border-radius: 10px;
            transition: width 0.3s ease;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
        <div class="container">
            <a class="navbar-brand" href="/dashboard">
                <i class="bi bi-arrow-left-circle"></i> Dashboard
            </a>
            <span class="navbar-text">
                <i class="bi bi-camera-video"></i> Auto Attendance Scanner
            </span>
            <a href="/logout" class="btn btn-light btn-sm">
                <i class="bi bi-box-arrow-right"></i> Logout
            </a>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row">
            <!-- Video Section -->
            <div class="col-lg-8">
                <div class="status-card">
                    <h4 class="mb-3"><i class="bi bi-camera-video-fill text-primary"></i> Face Recognition Scanner</h4>
                    
                    <div class="video-container mb-4">
                        <video id="video" width="640" height="480" autoplay muted></video>
                        <canvas id="canvas"></canvas>
                        <div id="autoScanIndicator" class="auto-scan-indicator" style="display: none;">
                            <i class="bi bi-camera-fill"></i> Auto Scanning...
                        </div>
                        <div id="recognitionOverlay" class="recognition-overlay" style="display: none;">
                            <div id="detectedName">Scanning...</div>
                            <div class="confidence-bar">
                                <div id="confidenceBar" class="confidence-fill" style="width: 0%"></div>
                            </div>
                            <small id="confidenceText">Confidence: 0%</small>
                        </div>
                    </div>

                    <div class="text-center mb-4">
                        <button class="btn btn-scan me-3" id="startScanBtn" onclick="startAutoScan()">
                            <i class="bi bi-play-fill"></i> Start Auto Scan
                        </button>
                        <button class="btn btn-stop" id="stopScanBtn" onclick="stopAutoScan()" style="display: none;">
                            <i class="bi bi-stop-fill"></i> Stop Scan
                        </button>
                    </div>

                    <div id="status" class="alert alert-info">
                        <i class="bi bi-info-circle"></i> <span id="statusText">Initializing camera and AI models...</span>
                    </div>
                </div>

                <!-- Statistics -->
                <div class="row">
                    <div class="col-md-4">
                        <div class="status-card text-center">
                            <h5 class="text-muted">Registered</h5>
                            <h2 class="text-primary" id="employeeCount">-</h2>
                            <small>Employees</small>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="status-card text-center">
                            <h5 class="text-muted">Today's</h5>
                            <h2 class="text-success" id="todayCount">-</h2>
                            <small>Attendance</small>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="status-card text-center">
                            <h5 class="text-muted">Detection</h5>
                            <h2 class="text-warning" id="detectionCount">0</h2>
                            <small>This Session</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Attendance -->
            <div class="col-lg-4">
                <div class="recent-attendance">
                    <h5 class="mb-3"><i class="bi bi-clock-history text-success"></i> Recent Attendance</h5>
                    <div id="recentList">
                        <div class="text-center text-muted py-4">
                            <i class="bi bi-hourglass-split"></i><br>
                            Waiting for attendance...
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const video = document.getElementById("video");
        const canvas = document.getElementById("canvas");
        const ctx = canvas.getContext("2d");
        const startScanBtn = document.getElementById("startScanBtn");
        const stopScanBtn = document.getElementById("stopScanBtn");
        const autoScanIndicator = document.getElementById("autoScanIndicator");
        const recognitionOverlay = document.getElementById("recognitionOverlay");
        const statusText = document.getElementById("statusText");
        
        let labeledDescriptors = [];
        let modelsLoaded = false;
        let faceApiLoaded = false;
        let isAutoScanning = false;
        let scanInterval = null;
        let detectionCount = 0;
        let recentAttendance = [];
        let lastDetectedTime = 0;
        let consecutiveDetections = new Map(); // Track consecutive detections

        // Load face-api.js
        function loadFaceApiLibrary() {
            return new Promise((resolve, reject) => {
                const cdnSources = [
                    'https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js',
                    'https://unpkg.com/face-api.js@0.22.2/dist/face-api.min.js'
                ];

                let currentIndex = 0;

                function tryLoadScript() {
                    if (currentIndex >= cdnSources.length) {
                        reject(new Error('Failed to load face-api.js'));
                        return;
                    }

                    const script = document.createElement('script');
                    script.src = cdnSources[currentIndex];

                    script.onload = function() {
                        if (typeof faceapi !== 'undefined') {
                            faceApiLoaded = true;
                            resolve();
                        } else {
                            currentIndex++;
                            tryLoadScript();
                        }
                    };

                    script.onerror = function() {
                        currentIndex++;
                        tryLoadScript();
                    };

                    document.head.appendChild(script);
                }
                tryLoadScript();
            });
        }

        // Start video
        async function startVideo() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        width: 640, 
                        height: 480,
                        facingMode: 'user'
                    } 
                });
                video.srcObject = stream;
                
                video.addEventListener('loadedmetadata', () => {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                });
                
                updateStatus("Camera ready", "success");
            } catch (error) {
                console.error("Error accessing camera:", error);
                updateStatus("Camera access failed", "danger");
            }
        }

        // Load AI models
        async function loadModels() {
            try {
                updateStatus("Loading AI models...", "warning");
                
                // Try loading from local models first, fallback to CDN
                const modelPaths = [
                    '/models', // Local models
                    'https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights' // CDN fallback
                ];
                
                let modelsLoadedSuccessfully = false;
                
                for (const modelPath of modelPaths) {
                    try {
                        console.log(`Trying to load models from: ${modelPath}`);
                        
                        await faceapi.nets.tinyFaceDetector.loadFromUri(modelPath);
                        await faceapi.nets.faceRecognitionNet.loadFromUri(modelPath);
                        await faceapi.nets.faceLandmark68Net.loadFromUri(modelPath);
                        
                        modelsLoadedSuccessfully = true;
                        console.log(`🎉 Models loaded successfully from: ${modelPath}`);
                        break;
                        
                    } catch (err) {
                        console.warn(`❌ Failed to load models from ${modelPath}:`, err);
                        if (modelPath === modelPaths[modelPaths.length - 1]) {
                            throw new Error('Failed to load models from all sources');
                        }
                    }
                }
                
                modelsLoaded = true;
                updateStatus("AI models loaded", "success");
                await fetchDescriptors();
            } catch (error) {
                console.error("Error loading models:", error);
                updateStatus("Failed to load AI models", "danger");
            }
        }

        // Fetch employee descriptors
        async function fetchDescriptors() {
            try {
                updateStatus("Loading employee data...", "warning");
                
                const response = await fetch('/get-descriptors');
                const employees = await response.json();
                
                labeledDescriptors = [];
                employees.forEach(emp => {
                    if (emp.faceId && emp.faceId.length > 0) {
                        const descriptor = new Float32Array(emp.faceId);
                        const labeledFace = new faceapi.LabeledFaceDescriptors(emp.name, [descriptor]);
                        labeledDescriptors.push(labeledFace);
                    }
                });
                
                document.getElementById("employeeCount").textContent = employees.length;
                
                if (employees.length === 0) {
                    updateStatus("No employees registered", "warning");
                } else {
                    updateStatus("Ready to scan", "success");
                    startScanBtn.disabled = false;
                }
                
                // Load today's count
                fetchTodayCount();
            } catch (error) {
                console.error("Error fetching descriptors:", error);
                updateStatus("Failed to load employee data", "danger");
            }
        }

        // Fetch today's attendance count
        async function fetchTodayCount() {
            try {
                const response = await fetch('/today-attendance');
                const data = await response.json();
                document.getElementById("todayCount").textContent = data.count;
            } catch (error) {
                console.error("Error fetching today's count:", error);
            }
        }

        // Update status
        function updateStatus(message, type) {
            statusText.textContent = message;
            const statusDiv = document.getElementById("status");
            statusDiv.className = `alert alert-${type}`;
        }

        // Start auto scanning
        function startAutoScan() {
            if (!modelsLoaded || labeledDescriptors.length === 0) {
                updateStatus("Cannot start: Models not loaded or no employees registered", "danger");
                return;
            }

            isAutoScanning = true;
            startScanBtn.style.display = "none";
            stopScanBtn.style.display = "inline-block";
            autoScanIndicator.style.display = "block";
            recognitionOverlay.style.display = "block";
            
            updateStatus("Auto scanning active", "success");
            
            // Start scanning every 1 second
            scanInterval = setInterval(performDetection, 1000);
        }

        // Stop auto scanning
        function stopAutoScan() {
            isAutoScanning = false;
            if (scanInterval) {
                clearInterval(scanInterval);
                scanInterval = null;
            }
            
            startScanBtn.style.display = "inline-block";
            stopScanBtn.style.display = "none";
            autoScanIndicator.style.display = "none";
            autoScanIndicator.className = "auto-scan-indicator stopped";
            recognitionOverlay.style.display = "none";
            
            updateStatus("Auto scanning stopped", "info");
            
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        // Perform face detection and recognition
        async function performDetection() {
            if (!isAutoScanning || !video.videoWidth || !video.videoHeight) return;

            try {
                const detections = await faceapi
                    .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions({
                        inputSize: 416,
                        scoreThreshold: 0.3
                    }))
                    .withFaceLandmarks()
                    .withFaceDescriptors();

                // Clear previous drawings
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                if (detections.length > 0) {
                    const faceMatcher = new faceapi.FaceMatcher(labeledDescriptors, 0.6);
                    
                    detections.forEach(detection => {
                        const box = detection.detection.box;
                        const match = faceMatcher.findBestMatch(detection.descriptor);
                        
                        // Draw face box
                        ctx.strokeStyle = match.label === 'unknown' ? '#ff6b6b' : '#38ef7d';
                        ctx.lineWidth = 3;
                        ctx.strokeRect(box.x, box.y, box.width, box.height);
                        
                        // Draw label
                        ctx.fillStyle = match.label === 'unknown' ? '#ff6b6b' : '#38ef7d';
                        ctx.font = '16px Arial';
                        const text = `${match.label} (${Math.round((1 - match.distance) * 100)}%)`;
                        ctx.fillText(text, box.x, box.y - 10);
                        
                        // Update overlay
                        updateRecognitionOverlay(match);
                        
                        // Auto mark attendance for recognized faces
                        if (match.label !== 'unknown' && (1 - match.distance) > 0.5) {
                            handleAutoAttendance(match.label, 1 - match.distance);
                        }
                    });
                } else {
                    updateRecognitionOverlay(null);
                }
            } catch (error) {
                console.error("Detection error:", error);
            }
        }

        // Update recognition overlay
        function updateRecognitionOverlay(match) {
            const detectedName = document.getElementById("detectedName");
            const confidenceBar = document.getElementById("confidenceBar");
            const confidenceText = document.getElementById("confidenceText");
            
            if (match) {
                const confidence = Math.round((1 - match.distance) * 100);
                detectedName.textContent = match.label === 'unknown' ? 'Unknown Person' : match.label;
                confidenceBar.style.width = `${confidence}%`;
                confidenceText.textContent = `Confidence: ${confidence}%`;
            } else {
                detectedName.textContent = "No face detected";
                confidenceBar.style.width = "0%";
                confidenceText.textContent = "Confidence: 0%";
            }
        }

        // Handle automatic attendance marking
        function handleAutoAttendance(employeeName, confidence) {
            const now = Date.now();
            
            // Track consecutive detections to avoid false positives
            if (!consecutiveDetections.has(employeeName)) {
                consecutiveDetections.set(employeeName, { count: 0, lastSeen: now });
            }
            
            const detection = consecutiveDetections.get(employeeName);
            
            // If last seen within 2 seconds, increment count
            if (now - detection.lastSeen < 2000) {
                detection.count++;
            } else {
                detection.count = 1; // Reset count
            }
            
            detection.lastSeen = now;
            
            // Mark attendance after 3 consecutive detections with good confidence
            if (detection.count >= 3 && confidence > 0.6) {
                markAttendanceForEmployee(employeeName);
                consecutiveDetections.delete(employeeName); // Reset after marking
            }
        }

        // Mark attendance for specific employee
        async function markAttendanceForEmployee(employeeName) {
            try {
                const response = await fetch('/mark-attendance', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ name: employeeName })
                });
                
                const result = await response.json();
                
                // Update UI
                detectionCount++;
                document.getElementById("detectionCount").textContent = detectionCount;
                
                // Add to recent attendance
                addToRecentAttendance(employeeName, result.message);
                
                // Update today's count
                fetchTodayCount();
                
                console.log("Attendance result:", result.message);
            } catch (error) {
                console.error("Error marking attendance:", error);
            }
        }

        // Add to recent attendance list
        function addToRecentAttendance(employeeName, message) {
            const now = new Date();
            const timeString = now.toLocaleTimeString();
            
            recentAttendance.unshift({
                name: employeeName,
                time: timeString,
                message: message
            });
            
            // Keep only last 10 entries
            if (recentAttendance.length > 10) {
                recentAttendance = recentAttendance.slice(0, 10);
            }
            
            updateRecentAttendanceDisplay();
        }

        // Update recent attendance display
        function updateRecentAttendanceDisplay() {
            const recentList = document.getElementById("recentList");
            
            if (recentAttendance.length === 0) {
                recentList.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="bi bi-hourglass-split"></i><br>
                        Waiting for attendance...
                    </div>
                `;
                return;
            }
            
            recentList.innerHTML = recentAttendance.map(item => `
                <div class="attendance-item">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong>${item.name}</strong><br>
                            <small>${item.time}</small>
                        </div>
                        <i class="bi bi-check-circle-fill text-light"></i>
                    </div>
                    <small class="mt-2 d-block">${item.message}</small>
                </div>
            `).join('');
        }

        // Initialize application
        async function init() {
            try {
                updateStatus("Loading face-api.js...", "info");
                await loadFaceApiLibrary();
                
                updateStatus("Starting camera...", "info");
                await startVideo();
                
                await loadModels();
            } catch (error) {
                console.error("Initialization error:", error);
                updateStatus("Initialization failed: " + error.message, "danger");
            }
        }

        // Start when page loads
        window.addEventListener('load', init);

        // Clean up when page unloads
        window.addEventListener('beforeunload', () => {
            if (isAutoScanning) {
                stopAutoScan();
            }
        });
    </script>
</body>
</html>
