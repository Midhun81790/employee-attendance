<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Attendance Records</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background: #f8f9fa;
        }
        .attendance-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem 0;
        }
        .table-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            padding: 2rem;
        }
        .filter-card {
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            padding: 1.5rem;
            margin-bottom: 2rem;
        }
        .attendance-type-badge {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
        }
        .loading-spinner {
            width: 2rem;
            height: 2rem;
            border: 0.2rem solid #f3f3f3;
            border-top: 0.2rem solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .stats-card {
            background: linear-gradient(45deg, #28a745, #20c997);
            color: white;
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="/dashboard">
                <i class="bi bi-arrow-left"></i> Back to Dashboard
            </a>
            <span class="navbar-text">
                Employee Attendance System
            </span>
            <a href="/logout" class="btn btn-light">
                <i class="bi bi-box-arrow-right"></i> Logout
            </a>
        </div>
    </nav>

    <div class="attendance-header">
        <div class="container">
            <div class="row">
                <div class="col-12 text-center">
                    <h1><i class="bi bi-calendar-check"></i> Attendance Records</h1>
                    <p class="lead">Track and manage employee attendance with advanced filtering</p>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-4">
        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <h4 id="totalEmployees">-</h4>
                    <p class="mb-0">Total Employees</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <h4 id="todayRecords">-</h4>
                    <p class="mb-0">Today's Records</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <h4 id="thisMonthRecords">-</h4>
                    <p class="mb-0">This Month</p>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <h4 id="filteredRecords">-</h4>
                    <p class="mb-0">Filtered Results</p>
                </div>
            </div>
        </div>

        <!-- Filter Card -->
        <div class="filter-card">
            <h5><i class="bi bi-funnel"></i> Filters & Export</h5>
            <div class="row">
                <div class="col-md-3">
                    <label class="form-label">Date From</label>
                    <input type="date" id="dateFrom" class="form-control">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Date To</label>
                    <input type="date" id="dateTo" class="form-control">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Employee</label>
                    <select id="employeeFilter" class="form-select">
                        <option value="">All Employees</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Attendance Type</label>
                    <select id="typeFilter" class="form-select">
                        <option value="">All Types</option>
                        <option value="check_in">Check In</option>
                        <option value="check_out">Check Out</option>
                        <option value="break_start">Break Start</option>
                        <option value="break_end">Break End</option>
                    </select>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-md-6">
                    <button class="btn btn-primary me-2" onclick="applyFilters()">
                        <i class="bi bi-search"></i> Apply Filters
                    </button>
                    <button class="btn btn-outline-secondary me-2" onclick="clearFilters()">
                        <i class="bi bi-x-circle"></i> Clear
                    </button>
                    <button class="btn btn-outline-info" onclick="refreshData()">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
                <div class="col-md-6 text-end">
                    <button class="btn btn-success me-2" onclick="exportCSV()">
                        <i class="bi bi-download"></i> Export CSV
                    </button>
                    <button class="btn btn-warning" onclick="exportMonthlyReport()">
                        <i class="bi bi-calendar-month"></i> Monthly Report
                    </button>
                </div>
            </div>
        </div>

        <!-- Attendance Table -->
        <div class="table-container">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3>Attendance Records</h3>
                <div id="loadingIndicator" style="display: none;">
                    <div class="loading-spinner"></div>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-hover table-striped">
                    <thead class="table-dark">
                        <tr>
                            <th>Employee</th>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Type</th>
                            <th>Location</th>
                            <th>Distance</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="attendanceTableBody">
                        <tr>
                            <td colspan="8" class="text-center">
                                <div class="loading-spinner mx-auto mb-2"></div>
                                Loading attendance records...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination -->
            <nav aria-label="Attendance pagination">
                <ul class="pagination justify-content-center" id="paginationContainer">
                    <!-- Pagination will be generated here -->
                </ul>
            </nav>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentPage = 1;
        let currentFilters = {};
        let allEmployees = [];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Set default date range to current month
            const now = new Date();
            const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
            const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            
            document.getElementById('dateFrom').value = firstDay.toISOString().split('T')[0];
            document.getElementById('dateTo').value = lastDay.toISOString().split('T')[0];
            
            loadEmployees();
            loadAttendanceData();
            loadStatistics();
        });

        // Load employees for filter dropdown
        async function loadEmployees() {
            try {
                const response = await fetch('/get-employees');
                allEmployees = await response.json();
                
                const employeeSelect = document.getElementById('employeeFilter');
                employeeSelect.innerHTML = '<option value="">All Employees</option>';
                
                allEmployees.forEach(emp => {
                    employeeSelect.innerHTML += `<option value="${emp._id}">${emp.name}</option>`;
                });
            } catch (error) {
                console.error('Error loading employees:', error);
            }
        }

        // Load attendance data with filters
        async function loadAttendanceData(page = 1) {
            try {
                showLoading(true);
                
                const params = new URLSearchParams({
                    page: page,
                    limit: 20,
                    ...currentFilters
                });

                const response = await fetch(`/api/attendance/filtered?${params}`);
                const data = await response.json();
                
                displayAttendanceData(data.records);
                updatePagination(data.pagination);
                updateFilteredCount(data.pagination.total);
                
            } catch (error) {
                console.error('Error loading attendance data:', error);
                showError('Failed to load attendance data');
            } finally {
                showLoading(false);
            }
        }

        // Display attendance data in table
        function displayAttendanceData(records) {
            const tbody = document.getElementById('attendanceTableBody');
            
            if (!records || records.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" class="text-center py-4">
                            <i class="bi bi-inbox" style="font-size: 2rem; color: #ccc;"></i>
                            <p class="text-muted mt-2">No attendance records found</p>
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = records.map(record => `
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-2" 
                                 style="width: 32px; height: 32px; font-size: 0.8rem;">
                                ${record.employee?.name?.charAt(0).toUpperCase() || 'U'}
                            </div>
                            <strong>${record.employee?.name || 'Unknown'}</strong>
                        </div>
                    </td>
                    <td>${new Date(record.timestamp).toLocaleDateString('en-IN')}</td>
                    <td>${new Date(record.timestamp).toLocaleTimeString('en-IN')}</td>
                    <td>
                        <span class="badge attendance-type-badge ${getTypeColor(record.attendanceType)}">
                            ${formatAttendanceType(record.attendanceType)}
                        </span>
                    </td>
                    <td>
                        <small class="text-muted">
                            ${record.location?.address ? record.location.address.substring(0, 50) + '...' : 'No address'}
                        </small>
                    </td>
                    <td>
                        <small>${record.location?.distance ? Math.round(record.location.distance) + 'm' : 'N/A'}</small>
                    </td>
                    <td>
                        <span class="badge ${record.isWithinGeofence ? 'bg-success' : 'bg-warning'}">
                            ${record.isWithinGeofence ? 'Valid' : 'Review'}
                        </span>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-info" onclick="viewDetails('${record._id}')">
                            <i class="bi bi-eye"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        // Apply filters
        function applyFilters() {
            currentFilters = {
                dateFrom: document.getElementById('dateFrom').value,
                dateTo: document.getElementById('dateTo').value,
                employee: document.getElementById('employeeFilter').value,
                type: document.getElementById('typeFilter').value
            };
            
            currentPage = 1;
            loadAttendanceData(currentPage);
        }

        // Clear filters
        function clearFilters() {
            document.getElementById('dateFrom').value = '';
            document.getElementById('dateTo').value = '';
            document.getElementById('employeeFilter').value = '';
            document.getElementById('typeFilter').value = '';
            
            currentFilters = {};
            currentPage = 1;
            loadAttendanceData(currentPage);
        }

        // Refresh data
        function refreshData() {
            loadAttendanceData(currentPage);
            loadStatistics();
        }

        // Load statistics
        async function loadStatistics() {
            try {
                const response = await fetch('/api/attendance/statistics');
                const stats = await response.json();
                
                document.getElementById('totalEmployees').textContent = stats.totalEmployees;
                document.getElementById('todayRecords').textContent = stats.todayRecords;
                document.getElementById('thisMonthRecords').textContent = stats.thisMonthRecords;
                
            } catch (error) {
                console.error('Error loading statistics:', error);
            }
        }

        // Export CSV
        async function exportCSV() {
            try {
                const params = new URLSearchParams(currentFilters);
                const response = await fetch(`/api/attendance/export/csv?${params}`);
                
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `attendance_report_${new Date().toISOString().split('T')[0]}.csv`;
                    a.click();
                    window.URL.revokeObjectURL(url);
                } else {
                    showError('Failed to export CSV');
                }
            } catch (error) {
                console.error('Error exporting CSV:', error);
                showError('Failed to export CSV');
            }
        }

        // Export monthly report
        async function exportMonthlyReport() {
            try {
                const response = await fetch('/api/attendance/export/monthly');
                
                if (response.ok) {
                    const result = await response.json();
                    alert(`Monthly report generated and sent to ${result.email}`);
                } else {
                    showError('Failed to generate monthly report');
                }
            } catch (error) {
                console.error('Error generating monthly report:', error);
                showError('Failed to generate monthly report');
            }
        }

        // Helper functions
        function getTypeColor(type) {
            const colors = {
                'check_in': 'bg-success',
                'check_out': 'bg-danger',
                'break_start': 'bg-warning',
                'break_end': 'bg-info'
            };
            return colors[type] || 'bg-secondary';
        }

        function formatAttendanceType(type) {
            return type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase());
        }

        function showLoading(show) {
            document.getElementById('loadingIndicator').style.display = show ? 'block' : 'none';
        }

        function showError(message) {
            alert('Error: ' + message);
        }

        function updateFilteredCount(count) {
            document.getElementById('filteredRecords').textContent = count;
        }

        function updatePagination(pagination) {
            const container = document.getElementById('paginationContainer');
            if (pagination.totalPages <= 1) {
                container.innerHTML = '';
                return;
            }

            let paginationHTML = '';
            
            // Previous button
            if (pagination.currentPage > 1) {
                paginationHTML += `<li class="page-item">
                    <button class="page-link" onclick="changePage(${pagination.currentPage - 1})">Previous</button>
                </li>`;
            }

            // Page numbers
            for (let i = Math.max(1, pagination.currentPage - 2); 
                 i <= Math.min(pagination.totalPages, pagination.currentPage + 2); i++) {
                paginationHTML += `<li class="page-item ${i === pagination.currentPage ? 'active' : ''}">
                    <button class="page-link" onclick="changePage(${i})">${i}</button>
                </li>`;
            }

            // Next button
            if (pagination.currentPage < pagination.totalPages) {
                paginationHTML += `<li class="page-item">
                    <button class="page-link" onclick="changePage(${pagination.currentPage + 1})">Next</button>
                </li>`;
            }

            container.innerHTML = paginationHTML;
        }

        function changePage(page) {
            currentPage = page;
            loadAttendanceData(page);
        }

        function viewDetails(recordId) {
            // Implementation for viewing record details
            alert('View details for record: ' + recordId);
        }
    </script>
</body>
</html>
